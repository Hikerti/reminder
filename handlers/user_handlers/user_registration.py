from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


router = Router()

class RegistrationState(StatesGroup):
    name_user = State()
    surname_user = State()
    age_user = State()
    login_user = State()
    password_user = State()

@router.message(Command(commands='registration'))
async def user_registration(message: Message, state: FSMContext):
    await state.set_state(RegistrationState.name_user)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! \n\n–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–º–∏ –¥–∞–ª–µ–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');

@router.message(RegistrationState.name_user)
async def create_name_user(message: Message, state: FSMContext): 
    if len(message.text) < 2:
        await message.answer('–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç')
        return
    
    await state.update_data(name_user=message.text, username=message.from_user.username, tg_id=message.from_user.id)
    await state.set_state(RegistrationState.surname_user)
    await message.answer('–ò–º—è –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')

@router.message(RegistrationState.surname_user)
async def create_surname_user(message: Message, state: FSMContext):
    if len(message.text) < 2:
        await message.answer('–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç')
        return
    
    await state.update_data(surname_user=message.text)
    await state.set_state(RegistrationState.age_user)
    await message.answer('–§–∞–º–∏–ª–∏—è –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–æ—Å—Ç');

@router.message(RegistrationState.age_user)
async def create_age_user(message: Message, state: FSMContext):
    if (message.text.isdigit() == False):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–æ—Å—Ç!\n\n–í–æ–∑—Ä–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–≥–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏')
        return
    
    if (int(message.text) < 12 or int(message.text) > 100):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–æ—Å—Ç!\n\n–í–æ–∑—Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 12 –∏ –Ω–µ –±–æ–ª—å—à–µ 100')
        return;

    age = int(message.text)
    
    await state.update_data(age_user=age)
    await state.set_state(RegistrationState.login_user)
    await message.answer('–í–æ–∑—Ä–æ—Å—Ç –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω');

@router.message(RegistrationState.login_user)
async def create_login_user(message: Message, state: FSMContext):
    if (len(message.text) < 6):
        await message.answer('–î–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–æ–π –±–æ–ª–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.') 
    
    await state.update_data(login_user=message.text)
    await state.set_state(RegistrationState.password_user)
    await message.answer('–õ–æ–≥–∏–Ω –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');

@router.message(RegistrationState.password_user)
async def create_password_user(message: Message, state: FSMContext):
    if len(message.text) < 8:
        await message.answer('–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç')
        return
    
    await state.update_data(password_user=message.text)
    
    data = await state.get_data()
    text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üë§ –ò–º—è: {data['name_user']}\n"
        f"üë• –§–∞–º–∏–ª–∏—è: {data['surname_user']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age_user']}\n"
        f"üîê –õ–æ–≥–∏–Ω: {data['login_user']}\n"
        f"üõ°Ô∏è –ü–∞—Ä–æ–ª—å: {'*' * len(data['password_user'])}\n\n"
        "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?"
    )

    keybords = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='confirm_registration')],
        [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_registration')]
    ])

    await message.answer(text, reply_markup=keybords)

@router.callback_query(lambda c: c.data in ['confirm_registration', 'cancel_registration'])
async def process_callback_registration(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'confirm_registration':
        data = await state.get_data()

        await callback.message.edit_text(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! {data}')
        
    else: 
        await callback.message.edit_text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
    
    await state.clear
